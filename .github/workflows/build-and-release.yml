name: Build and Release Plugin

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PLUGIN_NAME: "zfs.dataset.converter"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          echo "Installing xmllint and other tools..."
          sudo apt-get update -qq
          sudo apt-get install -y libxml2-utils
          echo "Verifying xmllint installation..."
          which xmllint
          xmllint --version

      - name: Setup PHP for validation
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Check required files exist
        run: |
          echo "Checking required files..."
          test -f src/${{ env.PLUGIN_NAME }}.plg || echo "Warning: .plg file missing"
          test -f src/ZFSConverter.page || echo "Warning: ZFSConverter.page missing"
          find src/scripts/ -name "*.php" | head -5
          find src/scripts/ -name "*.sh" | head -5

      - name: Validate PHP syntax
        run: |
          echo "Validating PHP files..."
          if find src/ -name "*.php" -print -quit | grep -q .; then
            echo "Found PHP files, validating syntax..."
            find src/ -name "*.php" -exec php -l {} \;
            echo "PHP validation completed"
          else
            echo "No PHP files found to validate"
          fi

      - name: Validate XML syntax
        run: |
          echo "Validating .plg file..."
          if [ -f src/${{ env.PLUGIN_NAME }}.plg ]; then
            echo "Found .plg file, validating XML..."
            xmllint --noout src/${{ env.PLUGIN_NAME }}.plg
            echo "XML validation passed"
          else
            echo "Error: .plg file not found"
            exit 1
          fi

      - name: Validate bash script syntax
        run: |
          echo "Validating bash scripts..."
          if find src/scripts/ -name "*.sh" -print -quit | grep -q .; then
            echo "Found bash scripts, validating syntax..."
            find src/scripts/ -name "*.sh" -exec bash -n {} \;
            echo "Bash validation completed"
          else
            echo "No bash scripts found to validate"
          fi

  build:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_name: ${{ steps.version.outputs.release_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            RELEASE_NAME="v$VERSION"
          else
            VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
            RELEASE_NAME="Development Build $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "Calculated version: $VERSION"

      - name: Update plugin version and URLs
        run: |
          echo "Updating plugin version to ${{ steps.version.outputs.version }}"
          sed -i 's/version="[^"]*"/version="${{ steps.version.outputs.version }}"/' src/${{ env.PLUGIN_NAME }}.plg
          
          echo "Updating repository URLs..."
          REPO_URL="https://github.com/${{ github.repository }}"
          sed -i "s|https://github.com/yourusername/zfs-dataset-converter|${REPO_URL}|g" src/${{ env.PLUGIN_NAME }}.plg
          sed -i "s|https://github.com/HammyHavoc/zfs-dataset-converter|${REPO_URL}|g" src/${{ env.PLUGIN_NAME }}.plg
          
          echo "Updated .plg file contents:"
          head -20 src/${{ env.PLUGIN_NAME }}.plg

      - name: Create plugin package
        run: |
          echo "Creating plugin package..."
          mkdir -p build/plugin
          
          # Copy all source files except .plg
          cp -r src/* build/plugin/
          
          # Create plugin files archive (excluding .plg file)
          cd build/plugin
          tar -czf ../plugin-files.tar.gz --exclude="*.plg" .
          cd ../..
          
          # Copy the updated .plg file to build root
          cp src/${{ env.PLUGIN_NAME }}.plg build/
          
          echo "Package contents:"
          ls -la build/
          echo "Archive contents:"
          tar -tzf build/plugin-files.tar.gz | head -10

      - name: Generate checksums
        run: |
          cd build
          sha256sum *.tar.gz > checksums.txt
          sha256sum *.plg >> checksums.txt
          echo "Generated checksums:"
          cat checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build-${{ steps.version.outputs.version }}
          path: |
            build/*.plg
            build/*.tar.gz
            build/checksums.txt
          retention-days: 30

  test:
    needs: [validate, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-build-${{ needs.build.outputs.version }}
          path: build/

      - name: Test plugin structure
        run: |
          echo "Testing plugin package structure..."
          cd build
          
          echo "Build directory contents:"
          ls -la
          
          if [ -f plugin-files.tar.gz ]; then
            echo "✓ Plugin files archive found"
            echo "Archive contents:"
            tar -tzf plugin-files.tar.gz | head -20
          else
            echo "✗ Plugin files archive missing"
            exit 1
          fi
          
          if [ -f ${{ env.PLUGIN_NAME }}.plg ]; then
            echo "✓ Plugin definition file found"
            echo "Plugin file size: $(wc -c < ${{ env.PLUGIN_NAME }}.plg) bytes"
          else
            echo "✗ Plugin definition file missing"
            exit 1
          fi

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-build-${{ needs.build.outputs.version }}
          path: build/

      - name: Create Release Notes
        run: |
          cat > release_notes.md << EOF
          # ZFS Dataset Converter Plugin ${{ needs.build.outputs.version }}
          
          ## Installation
          
          Go to **Plugins** → **Install Plugin** and paste:
          \`\`\`
          https://github.com/${{ github.repository }}/releases/download/v${{ needs.build.outputs.version }}/${{ env.PLUGIN_NAME }}.plg
          \`\`\`
          
          ## Features
          
          - 🔄 Resume interrupted conversions automatically
          - 🧠 Intelligent validation system (no false failures)
          - 🔔 Configurable Unraid notifications for all operations
          - 📊 Real-time progress monitoring and live logs
          - 🐳 Container and VM management during conversion
          - 📁 Special character handling for dataset names
          - 🔍 Comprehensive space checking and warnings
          - 🎨 Professional GUI integrated with Unraid
          
          ## Files
          
          - \`${{ env.PLUGIN_NAME }}.plg\` - Plugin definition for installation
          - \`plugin-files.tar.gz\` - Plugin source files
          - \`checksums.txt\` - SHA256 checksums for verification
          
          ## Build Information
          
          - **Version**: ${{ needs.build.outputs.version }}
          - **Built**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: $(echo ${{ github.sha }} | head -c 8)
          - **Branch**: ${GITHUB_REF#refs/heads/}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: ${{ needs.build.outputs.release_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          files: |
            build/${{ env.PLUGIN_NAME }}.plg
            build/plugin-files.tar.gz
            build/checksums.txt

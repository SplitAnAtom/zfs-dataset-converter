name: Build and Release Plugin

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PLUGIN_NAME: "zfs.dataset.converter"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP for validation
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Check required files exist
        run: |
          echo "Checking required files..."
          test -f src/${{ env.PLUGIN_NAME }}.plg && echo "✓ .plg file found" || echo "⚠ .plg file missing"
          test -f src/ZFSConverter.page && echo "✓ ZFSConverter.page found" || echo "⚠ ZFSConverter.page missing"
          echo "PHP files found:"
          find src/ -name "*.php" | head -10
          echo "Shell scripts found:"
          find src/ -name "*.sh" | head -10

      - name: Validate PHP syntax
        run: |
          echo "Validating PHP files..."
          php_files=$(find src/ -name "*.php")
          if [ -n "$php_files" ]; then
            echo "Found PHP files, validating syntax..."
            find src/ -name "*.php" -exec echo "Checking: {}" \; -exec php -l {} \;
            echo "✓ PHP validation completed"
          else
            echo "No PHP files found to validate"
          fi

      - name: Validate XML syntax (custom)
        run: |
          echo "Validating .plg file XML structure..."
          if [ -f src/${{ env.PLUGIN_NAME }}.plg ]; then
            echo "Found .plg file, checking XML structure..."
            
            # Check for XML declaration
            if grep -q "<?xml version" src/${{ env.PLUGIN_NAME }}.plg; then
              echo "✓ XML declaration found"
            else
              echo "✗ Missing XML declaration"
              exit 1
            fi
            
            # Check for PLUGIN root element
            if grep -q "<PLUGIN" src/${{ env.PLUGIN_NAME }}.plg; then
              echo "✓ PLUGIN root element found"
            else
              echo "✗ Missing PLUGIN root element"
              exit 1
            fi
            
            # Check for closing tag
            if grep -q "</PLUGIN>" src/${{ env.PLUGIN_NAME }}.plg; then
              echo "✓ Closing PLUGIN tag found"
            else
              echo "✗ Missing closing PLUGIN tag"
              exit 1
            fi
            
            # Check basic required elements
            if grep -q "name=" src/${{ env.PLUGIN_NAME }}.plg; then
              echo "✓ Plugin name attribute found"
            else
              echo "✗ Missing plugin name attribute"
              exit 1
            fi
            
            echo "✓ Basic XML structure validation passed"
          else
            echo "✗ .plg file not found"
            exit 1
          fi

      - name: Validate bash script syntax
        run: |
          echo "Validating bash scripts..."
          bash_files=$(find src/ -name "*.sh")
          if [ -n "$bash_files" ]; then
            echo "Found bash scripts, validating syntax..."
            find src/ -name "*.sh" -exec echo "Checking: {}" \; -exec bash -n {} \;
            echo "✓ Bash validation completed"
          else
            echo "No bash scripts found to validate"
          fi

  build:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_name: ${{ steps.version.outputs.release_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            RELEASE_NAME="ZFS Dataset Converter v$VERSION"
          else
            VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
            RELEASE_NAME="ZFS Dataset Converter Development Build $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "✓ Calculated version: $VERSION"

      - name: Update plugin version and URLs
        run: |
          echo "Updating plugin version to ${{ steps.version.outputs.version }}"
          sed -i 's/version="[^"]*"/version="${{ steps.version.outputs.version }}"/' src/${{ env.PLUGIN_NAME }}.plg
          
          echo "Updating repository URLs..."
          REPO_URL="https://github.com/${{ github.repository }}"
          sed -i "s|https://github.com/yourusername/zfs-dataset-converter|${REPO_URL}|g" src/${{ env.PLUGIN_NAME }}.plg
          sed -i "s|https://github.com/HammyHavoc/zfs-dataset-converter|${REPO_URL}|g" src/${{ env.PLUGIN_NAME }}.plg
          
          echo "✓ Plugin file updated"

      - name: Create plugin package
        run: |
          echo "Creating plugin package..."
          mkdir -p build/plugin
          
          # Copy all source files
          cp -r src/* build/plugin/
          
          # Create plugin files archive (excluding .plg file)
          cd build/plugin
          tar -czf ../plugin-files.tar.gz --exclude="*.plg" .
          cd ../..
          
          # Copy the updated .plg file to build root
          cp src/${{ env.PLUGIN_NAME }}.plg build/
          
          echo "✓ Package created successfully"
          echo "Build contents:"
          ls -la build/

      - name: Generate checksums
        run: |
          cd build
          sha256sum *.tar.gz > checksums.txt
          sha256sum *.plg >> checksums.txt
          echo "✓ Checksums generated:"
          cat checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build-${{ steps.version.outputs.version }}
          path: |
            build/*.plg
            build/*.tar.gz
            build/checksums.txt
          retention-days: 90

  test:
    needs: [validate, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-build-${{ needs.build.outputs.version }}
          path: build/

      - name: Test plugin structure
        run: |
          echo "Testing plugin package structure..."
          cd build
          
          echo "Build directory contents:"
          ls -la
          
          # Test plugin files archive
          if [ -f plugin-files.tar.gz ]; then
            echo "✓ Plugin files archive found"
            echo "Archive size: $(du -h plugin-files.tar.gz | cut -f1)"
            echo "Archive contents preview:"
            tar -tzf plugin-files.tar.gz | head -20
            
            # Extract and test structure
            mkdir -p test-extract
            tar -xzf plugin-files.tar.gz -C test-extract
            echo "✓ Archive extracts successfully"
            
            # Check for key files
            test -f test-extract/ZFSConverter.page && echo "✓ GUI page found" || echo "⚠ GUI page missing"
            test -d test-extract/scripts && echo "✓ Scripts directory found" || echo "⚠ Scripts directory missing"
            
          else
            echo "✗ Plugin files archive missing"
            exit 1
          fi
          
          # Test plugin definition file
          if [ -f ${{ env.PLUGIN_NAME }}.plg ]; then
            echo "✓ Plugin definition file found"
            echo "Plugin file size: $(wc -c < ${{ env.PLUGIN_NAME }}.plg) bytes"
            
            # Basic content check
            if grep -q "github.com/${{ github.repository }}" ${{ env.PLUGIN_NAME }}.plg; then
              echo "✓ Plugin URLs updated correctly"
            else
              echo "⚠ Plugin URLs may not be updated"
            fi
          else
            echo "✗ Plugin definition file missing"
            exit 1
          fi
          
          echo "✓ All tests passed"

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-build-${{ needs.build.outputs.version }}
          path: build/

      - name: Create Release Notes
        run: |
          cat > release_notes.md << 'EOF'
          # 🗄️ ZFS Dataset Converter Plugin ${{ needs.build.outputs.version }}
          
          Convert regular folders to ZFS datasets with advanced features including resume capability, intelligent validation, and comprehensive Unraid integration.
          
          ## 🚀 Installation
          
          Go to **Plugins** → **Install Plugin** and paste:
          ```
          https://github.com/${{ github.repository }}/releases/download/v${{ needs.build.outputs.version }}/${{ env.PLUGIN_NAME }}.plg
          ```
          
          ## ✨ Features
          
          - 🔄 **Resume interrupted conversions** automatically
          - 🧠 **Intelligent validation system** (no false failures)
          - 🔔 **Configurable Unraid notifications** for all operations
          - 📊 **Real-time progress monitoring** and live logs
          - 🐳 **Container and VM management** during conversion
          - 📁 **Special character handling** for dataset names
          - 🔍 **Comprehensive space checking** and warnings
          - 🎨 **Professional GUI** integrated with Unraid
          
          ## 📦 Files in this Release
          
          - `${{ env.PLUGIN_NAME }}.plg` - Plugin definition for installation
          - `plugin-files.tar.gz` - Plugin source files  
          - `checksums.txt` - SHA256 checksums for verification
          
          ## 💻 Usage
          
          1. Install the plugin using the URL above
          2. Navigate to **Settings** → **Utilities** → **ZFS Dataset Converter**
          3. Configure your settings (containers, VMs, additional datasets)
          4. Click "Scan for Convertible Folders" to preview
          5. Click "Start Conversion" to begin
          
          ## ⚠️ Important Notes
          
          - **Always test with Dry Run first**
          - **Ensure adequate backups** before conversion  
          - **Monitor space closely** during large conversions
          - **Requires ~2.2x folder size** in free space during conversion
          
          ## 🔧 Build Information
          
          - **Version**: ${{ needs.build.outputs.version }}
          - **Built**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: ${{ github.sha }}
          - **Repository**: https://github.com/${{ github.repository }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: ${{ needs.build.outputs.release_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          files: |
            build/${{ env.PLUGIN_NAME }}.plg
            build/plugin-files.tar.gz
            build/checksums.txt
          fail_on_unmatched_files: false
